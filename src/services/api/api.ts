/* tslint:disable */
/* eslint-disable */
/**
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ERuolo = {
    Amministratore: 'Amministratore',
    Utente: 'Utente'
} as const;

export type ERuolo = typeof ERuolo[keyof typeof ERuolo];


/**
 * 
 * @export
 * @interface ReqAgendaDTO
 */
export interface ReqAgendaDTO {
    /**
     * 
     * @type {string}
     * @memberof ReqAgendaDTO
     */
    'nomeAgenda': string;
    /**
     * 
     * @type {string}
     * @memberof ReqAgendaDTO
     */
    'descrizione'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReqAgendaDTO
     */
    'tema'?: string | null;
}
/**
 * 
 * @export
 * @interface ReqLoginUser
 */
export interface ReqLoginUser {
    /**
     * 
     * @type {string}
     * @memberof ReqLoginUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ReqLoginUser
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ReqRegisterUser
 */
export interface ReqRegisterUser {
    /**
     * 
     * @type {string}
     * @memberof ReqRegisterUser
     */
    'nome': string;
    /**
     * 
     * @type {string}
     * @memberof ReqRegisterUser
     */
    'cognome': string;
    /**
     * 
     * @type {string}
     * @memberof ReqRegisterUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ReqRegisterUser
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ReqRegisterUser
     */
    'confermaPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ReqRegisterUser
     */
    'dataNascita': string;
    /**
     * 
     * @type {string}
     * @memberof ReqRegisterUser
     */
    'genere': string;
}
/**
 * 
 * @export
 * @interface ResAuthToken
 */
export interface ResAuthToken {
    /**
     * 
     * @type {string}
     * @memberof ResAuthToken
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ResAuthToken
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface TokenInfoDTO
 */
export interface TokenInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof TokenInfoDTO
     */
    'utenteId': number;
    /**
     * 
     * @type {string}
     * @memberof TokenInfoDTO
     */
    'nomeCompleto': string;
    /**
     * 
     * @type {ERuolo}
     * @memberof TokenInfoDTO
     */
    'ruolo': ERuolo;
}



/**
 * AgendaApi - axios parameter creator
 * @export
 */
export const AgendaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ReqAgendaDTO} reqAgendaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAgendaAddAgendaPost: async (reqAgendaDTO: ReqAgendaDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqAgendaDTO' is not null or undefined
            assertParamExists('apiAgendaAddAgendaPost', 'reqAgendaDTO', reqAgendaDTO)
            const localVarPath = `/api/Agenda/AddAgenda`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqAgendaDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAgendaGetAllAgendaPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Agenda/GetAllAgenda`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgendaApi - functional programming interface
 * @export
 */
export const AgendaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgendaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ReqAgendaDTO} reqAgendaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAgendaAddAgendaPost(reqAgendaDTO: ReqAgendaDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAgendaAddAgendaPost(reqAgendaDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendaApi.apiAgendaAddAgendaPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAgendaGetAllAgendaPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAgendaGetAllAgendaPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgendaApi.apiAgendaGetAllAgendaPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AgendaApi - factory interface
 * @export
 */
export const AgendaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgendaApiFp(configuration)
    return {
        /**
         * 
         * @param {ReqAgendaDTO} reqAgendaDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAgendaAddAgendaPost(reqAgendaDTO: ReqAgendaDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAgendaAddAgendaPost(reqAgendaDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAgendaGetAllAgendaPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAgendaGetAllAgendaPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgendaApi - object-oriented interface
 * @export
 * @class AgendaApi
 * @extends {BaseAPI}
 */
export class AgendaApi extends BaseAPI {
    /**
     * 
     * @param {ReqAgendaDTO} reqAgendaDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendaApi
     */
    public apiAgendaAddAgendaPost(reqAgendaDTO: ReqAgendaDTO, options?: RawAxiosRequestConfig) {
        return AgendaApiFp(this.configuration).apiAgendaAddAgendaPost(reqAgendaDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgendaApi
     */
    public apiAgendaGetAllAgendaPost(options?: RawAxiosRequestConfig) {
        return AgendaApiFp(this.configuration).apiAgendaGetAllAgendaPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGetUserInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/GetUserInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReqLoginUser} reqLoginUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (reqLoginUser: ReqLoginUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqLoginUser' is not null or undefined
            assertParamExists('apiAuthLoginPost', 'reqLoginUser', reqLoginUser)
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqLoginUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [oldRefresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenPost: async (oldRefresh?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oldRefresh !== undefined) {
                localVarQueryParameter['oldRefresh'] = oldRefresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReqRegisterUser} [reqRegisterUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (reqRegisterUser?: ReqRegisterUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqRegisterUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthGetUserInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenInfoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthGetUserInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthGetUserInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ReqLoginUser} reqLoginUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(reqLoginUser: ReqLoginUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResAuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(reqLoginUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [oldRefresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRefreshTokenPost(oldRefresh?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResAuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRefreshTokenPost(oldRefresh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ReqRegisterUser} [reqRegisterUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(reqRegisterUser?: ReqRegisterUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResAuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(reqRegisterUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGetUserInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<TokenInfoDTO> {
            return localVarFp.apiAuthGetUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReqLoginUser} reqLoginUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(reqLoginUser: ReqLoginUser, options?: RawAxiosRequestConfig): AxiosPromise<ResAuthToken> {
            return localVarFp.apiAuthLoginPost(reqLoginUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [oldRefresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenPost(oldRefresh?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResAuthToken> {
            return localVarFp.apiAuthRefreshTokenPost(oldRefresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReqRegisterUser} [reqRegisterUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(reqRegisterUser?: ReqRegisterUser, options?: RawAxiosRequestConfig): AxiosPromise<ResAuthToken> {
            return localVarFp.apiAuthRegisterPost(reqRegisterUser, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthGetUserInfoGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthGetUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReqLoginUser} reqLoginUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(reqLoginUser: ReqLoginUser, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(reqLoginUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [oldRefresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRefreshTokenPost(oldRefresh?: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRefreshTokenPost(oldRefresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReqRegisterUser} [reqRegisterUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(reqRegisterUser?: ReqRegisterUser, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(reqRegisterUser, options).then((request) => request(this.axios, this.basePath));
    }
}



